// Generated by gencpp from file chat_app/ChatMsg.msg
// DO NOT EDIT!


#ifndef CHAT_APP_MESSAGE_CHATMSG_H
#define CHAT_APP_MESSAGE_CHATMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chat_app
{
template <class ContainerAllocator>
struct ChatMsg_
{
  typedef ChatMsg_<ContainerAllocator> Type;

  ChatMsg_()
    : username()
    , message()  {
    }
  ChatMsg_(const ContainerAllocator& _alloc)
    : username(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _username_type;
  _username_type username;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::chat_app::ChatMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chat_app::ChatMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ChatMsg_

typedef ::chat_app::ChatMsg_<std::allocator<void> > ChatMsg;

typedef boost::shared_ptr< ::chat_app::ChatMsg > ChatMsgPtr;
typedef boost::shared_ptr< ::chat_app::ChatMsg const> ChatMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chat_app::ChatMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chat_app::ChatMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chat_app::ChatMsg_<ContainerAllocator1> & lhs, const ::chat_app::ChatMsg_<ContainerAllocator2> & rhs)
{
  return lhs.username == rhs.username &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chat_app::ChatMsg_<ContainerAllocator1> & lhs, const ::chat_app::ChatMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chat_app

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chat_app::ChatMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chat_app::ChatMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chat_app::ChatMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chat_app::ChatMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chat_app::ChatMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chat_app::ChatMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chat_app::ChatMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c10ce50aab5101b9e0de49c059d28c8";
  }

  static const char* value(const ::chat_app::ChatMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c10ce50aab5101bULL;
  static const uint64_t static_value2 = 0x9e0de49c059d28c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::chat_app::ChatMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chat_app/ChatMsg";
  }

  static const char* value(const ::chat_app::ChatMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chat_app::ChatMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string username\n"
"string message\n"
;
  }

  static const char* value(const ::chat_app::ChatMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chat_app::ChatMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.username);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChatMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chat_app::ChatMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chat_app::ChatMsg_<ContainerAllocator>& v)
  {
    s << indent << "username: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.username);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHAT_APP_MESSAGE_CHATMSG_H
